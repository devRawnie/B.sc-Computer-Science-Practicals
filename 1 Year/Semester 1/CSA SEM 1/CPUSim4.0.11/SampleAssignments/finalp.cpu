<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, IndexingInfo?, ProgramCounterInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id CDATA #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED initialValue CDATA #REQUIRED readOnly (true|false) "false" id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED carryBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED instructionFormat CDATA #REQUIRED assemblyFormat CDATA #REQUIRED instructionColors CDATA #REQUIRED assemblyColors CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT IndexingInfo EMPTY>
<!ATTLIST IndexingInfo indexFromRight CDATA "false">
<!ELEMENT ProgramCounterInfo EMPTY>
<!ATTLIST ProgramCounterInfo programCounter IDREF #REQUIRED>
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="finalp.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OPCODE" type="required" numBits="16" relativity="absolute" signed="false" defaultValue="0" id="model.Fielde4a83a">
	</Field>
	<Field name="OPR" type="required" numBits="3" relativity="absolute" signed="false" defaultValue="0" id="model.Fieldf25590">
	</Field>
	<Field name="MODE" type="required" numBits="1" relativity="absolute" signed="false" defaultValue="0" id="model.Field633f21">
		<FieldValue name="Direct" value="0" />
		<FieldValue name="Indirect" value="1" />
	</Field>
	<Field name="ADDR" type="required" numBits="12" relativity="absolute" signed="false" defaultValue="0" id="model.Field1139c12">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" initialValue="0" readOnly="false" id="model.module.Register1607cac" />
	<Register name="AR" width="12" initialValue="0" readOnly="false" id="model.module.Register1e90065" />
	<Register name="CTR" width="16" initialValue="0" readOnly="false" id="model.module.Register186975" />
	<Register name="DR" width="16" initialValue="0" readOnly="false" id="model.module.Register1c5d469" />
	<Register name="E" width="1" initialValue="0" readOnly="false" id="model.module.Registerc7f3c" />
	<Register name="INPR" width="8" initialValue="0" readOnly="true" id="model.module.Register16f8652" />
	<Register name="IR" width="16" initialValue="0" readOnly="false" id="model.module.Register10c1ab" />
	<Register name="OUTR" width="8" initialValue="0" readOnly="false" id="model.module.Register111b030" />
	<Register name="PC" width="12" initialValue="0" readOnly="false" id="model.module.Registerc16e47" />
	<Register name="S" width="1" initialValue="0" readOnly="false" id="model.module.Register13aaec5" />
	<Register name="TR" width="16" initialValue="0" readOnly="false" id="model.module.Register1936a79" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="COUT" bit="0" register="model.module.Registerc7f3c" halt="false" id="model.module.ConditionBitb5578" />
	<ConditionBit name="HALTBIT" bit="0" register="model.module.Register13aaec5" halt="true" id="model.module.ConditionBit17dac02" />

	<!--............. rams ..........................-->
	<RAM name="M" length="4096" cellSize="16" id="model.module.RAM14df536" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="model.module.Register1607cac" start="0" numBits="1" value="0" id="model.microinstruction.CpusimSet11e376f" />

	<!--............. test ..........................-->
	<Test name="IF(AC!=0 ) SKIP NEXT" register="model.module.Register1607cac" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test420d10" />
	<Test name="IF(AC[15]!=0) SKIP NEXT" register="model.module.Register1607cac" start="15" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test3e8506" />
	<Test name="IF(AC[15]!=1) SKIP NEXT" register="model.module.Register1607cac" start="15" numBits="1" comparison="NE" value="1" omission="1" id="model.microinstruction.Test1004c33" />
	<Test name="IF(CTR!=0) SKIP NEXT" register="model.module.Register186975" start="0" numBits="16" comparison="NE" value="0" omission="1" id="model.microinstruction.Test18522c2" />
	<Test name="IF(D7=1) SKIP NEXT 3" register="model.module.Register10c1ab" start="13" numBits="3" comparison="EQ" value="7" omission="3" id="model.microinstruction.Test4c4921" />
	<Test name="IF(E!=0) SKIP NEXT" register="model.module.Registerc7f3c" start="0" numBits="1" comparison="NE" value="0" omission="1" id="model.microinstruction.Test1497e60" />
	<Test name="IF(I=0) SKIP NEXT" register="model.module.Register10c1ab" start="12" numBits="1" comparison="EQ" value="0" omission="1" id="model.microinstruction.Test68af9c" />

	<!--............. increment .....................-->
	<Increment name="AC&lt;-AC+1" register="model.module.Register1607cac" delta="1" id="model.microinstruction.Increment1b35a06" />
	<Increment name="AR&lt;-AR+1" register="model.module.Register1e90065" delta="1" id="model.microinstruction.Increment4eaaf" />
	<Increment name="CTR&lt;-CTR+1" register="model.module.Register186975" delta="1" id="model.microinstruction.Increment1c861ce" />
	<Increment name="PC&lt;PC+1" register="model.module.Registerc16e47" delta="1" id="model.microinstruction.Increment1e02aa6" />

	<!--............. shift .........................-->
	<Shift name="SHL AC" type="logical" source="model.module.Register1607cac" destination="model.module.Register1607cac" direction="left" distance="1" id="model.microinstruction.Shift9fbe52" />
	<Shift name="SHR AC" type="logical" source="model.module.Register1607cac" destination="model.module.Register1607cac" direction="right" distance="1" id="model.microinstruction.Shift5a99cb" />

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC'" type="NOT" source1="model.module.Register1607cac" source2="model.module.Register1607cac" destination="model.module.Register1607cac" id="model.microinstruction.Logicalf1c245" />
	<Logical name="AC&lt;-AC^DR" type="AND" source1="model.module.Register1607cac" source2="model.module.Register1c5d469" destination="model.module.Register1607cac" id="model.microinstruction.Logical287e9b" />
	<Logical name="E&lt;-E'" type="NOT" source1="model.module.Registerc7f3c" source2="model.module.Registerc7f3c" destination="model.module.Registerc7f3c" id="model.microinstruction.Logical1dad132" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC+DR" type="ADD" source1="model.module.Register1607cac" source2="model.module.Register1c5d469" destination="model.module.Register1607cac" carryBit="model.module.ConditionBitb5578" id="model.microinstruction.Arithmetic43d0f5" />
	<Arithmetic name="AC&lt;-AC-DR" type="SUBTRACT" source1="model.module.Register1607cac" source2="model.module.Register1c5d469" destination="model.module.Register1607cac" carryBit="model.module.ConditionBitb5578" id="model.microinstruction.Arithmetic73c67a" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC&lt;-DR" source="model.module.Register1c5d469" srcStartBit="0" dest="model.module.Register1607cac" destStartBit="0" numBits="16" id="model.microinstruction.TransferRtoR129c654" />
	<TransferRtoR name="AC[0]&lt;-TR[0]" source="model.module.Register1936a79" srcStartBit="0" dest="model.module.Register1607cac" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1151ce6" />
	<TransferRtoR name="AC[15]&lt;-TR[15]" source="model.module.Register1936a79" srcStartBit="15" dest="model.module.Register1607cac" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR8f95f3" />
	<TransferRtoR name="AR&lt;-IR[0-11]" source="model.module.Register10c1ab" srcStartBit="0" dest="model.module.Register1e90065" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR1758f4c" />
	<TransferRtoR name="AR&lt;-PC" source="model.module.Registerc16e47" srcStartBit="0" dest="model.module.Register1e90065" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoR61165d" />
	<TransferRtoR name="E&lt;-AC[0]" source="model.module.Register1607cac" srcStartBit="0" dest="model.module.Registerc7f3c" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR1b84634" />
	<TransferRtoR name="E&lt;-AC[15]" source="model.module.Register1607cac" srcStartBit="15" dest="model.module.Registerc7f3c" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoR68f87a" />
	<TransferRtoR name="PC&lt;-AR" source="model.module.Register1e90065" srcStartBit="0" dest="model.module.Registerc16e47" destStartBit="0" numBits="12" id="model.microinstruction.TransferRtoRe66a1c" />
	<TransferRtoR name="TR[0]&lt;-E" source="model.module.Registerc7f3c" srcStartBit="0" dest="model.module.Register1936a79" destStartBit="0" numBits="1" id="model.microinstruction.TransferRtoRf599d9" />
	<TransferRtoR name="TR[15]&lt;-E" source="model.module.Registerc7f3c" srcStartBit="0" dest="model.module.Register1936a79" destStartBit="15" numBits="1" id="model.microinstruction.TransferRtoR5a14ed" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE IR" ir="model.module.Register10c1ab" id="model.microinstruction.Decode192949b" />

	<!--............. set condition bit .............-->
	<SetCondBit name="E&lt;-0" bit="model.module.ConditionBitb5578" value="0" id="model.microinstruction.SetCondBit159ff57" />
	<SetCondBit name="S&lt;-1" bit="model.module.ConditionBit17dac02" value="1" id="model.microinstruction.SetCondBit15dee62" />

	<!--............. io ............................-->
	<IO name="AC&lt;-INPR" direction="input" type="ascii" buffer="model.module.Register1607cac" connection="[Console]" id="model.microinstruction.IO16499a" />
	<IO name="OUTR&lt;-AC" direction="output" type="ascii" buffer="model.module.Register1607cac" connection="[Console]" id="model.microinstruction.IO704f94" />

	<!--............. memory access .................-->
	<MemoryAccess name="AR&lt;-M[AR]" direction="read" memory="model.module.RAM14df536" data="model.module.Register1e90065" address="model.module.Register1e90065" id="model.microinstruction.MemoryAccess3a08de" />
	<MemoryAccess name="CTR&lt;-M[AR]" direction="read" memory="model.module.RAM14df536" data="model.module.Register186975" address="model.module.Register1e90065" id="model.microinstruction.MemoryAccess1977448" />
	<MemoryAccess name="DR&lt;-M[AR]" direction="read" memory="model.module.RAM14df536" data="model.module.Register1c5d469" address="model.module.Register1e90065" id="model.microinstruction.MemoryAccess7b9c9b" />
	<MemoryAccess name="IR&lt;-M[AR]" direction="read" memory="model.module.RAM14df536" data="model.module.Register10c1ab" address="model.module.Register1e90065" id="model.microinstruction.MemoryAccess1dccf16" />
	<MemoryAccess name="M[AR]&lt;-AC" direction="write" memory="model.module.RAM14df536" data="model.module.Register1607cac" address="model.module.Register1e90065" id="model.microinstruction.MemoryAccess729196" />
	<MemoryAccess name="M[AR]&lt;-PC" direction="write" memory="model.module.RAM14df536" data="model.module.Registerc16e47" address="model.module.Register1e90065" id="model.microinstruction.MemoryAccess14dffe" />

	<!--............. end ...........................-->
	<End id="model.microinstruction.End765716" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="model.microinstruction.TransferRtoR61165d" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess1dccf16" />
		<Microinstruction microRef="model.microinstruction.Increment1e02aa6" />
		<Microinstruction microRef="model.microinstruction.Test4c4921" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1758f4c" />
		<Microinstruction microRef="model.microinstruction.Test68af9c" />
		<Microinstruction microRef="model.microinstruction.MemoryAccess3a08de" />
		<Microinstruction microRef="model.microinstruction.Decode192949b" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="ICSZ" opcode="f200" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#96acb4" assemblyColors="#96acb4" >
		<Microinstruction microRef="model.microinstruction.Test18522c2" />
		<Microinstruction microRef="model.microinstruction.Increment1e02aa6" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#eeab9c" assemblyColors="#eeab9c" >
		<Microinstruction microRef="model.microinstruction.IO704f94" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#e4f084" assemblyColors="#e4f084" >
		<Microinstruction microRef="model.microinstruction.IO16499a" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="e001" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#cbc4ee" assemblyColors="#cbc4ee" >
		<Microinstruction microRef="model.microinstruction.SetCondBit15dee62" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="SZE" opcode="e002" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.Test1497e60" />
		<Microinstruction microRef="model.microinstruction.Increment1e02aa6" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="SZA" opcode="e004" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.Test420d10" />
		<Microinstruction microRef="model.microinstruction.Increment1e02aa6" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="SNA" opcode="e008" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.Test1004c33" />
		<Microinstruction microRef="model.microinstruction.Increment1e02aa6" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="e010" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.Test3e8506" />
		<Microinstruction microRef="model.microinstruction.Increment1e02aa6" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="e020" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.Increment1b35a06" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="CIL" opcode="e040" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.TransferRtoRf599d9" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR68f87a" />
		<Microinstruction microRef="model.microinstruction.Shift9fbe52" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1151ce6" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="CIR" opcode="e080" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.TransferRtoR5a14ed" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR1b84634" />
		<Microinstruction microRef="model.microinstruction.Shift5a99cb" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR8f95f3" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="CME" opcode="e100" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.Logical1dad132" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="e200" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.Logicalf1c245" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="CLE" opcode="e400" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.SetCondBit159ff57" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="e800" instructionFormat="OPCODE" assemblyFormat="OPCODE" instructionColors="#b5c58d" assemblyColors="#b5c58d" >
		<Microinstruction microRef="model.microinstruction.CpusimSet11e376f" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="LDC" opcode="6" instructionFormat="OPR MODE ADDR" assemblyFormat="OPR MODE ADDR" instructionColors="#a8c9ad #c794b4 #beacb4" assemblyColors="#a8c9ad #c794b4 #beacb4" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess1977448" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="5" instructionFormat="OPR MODE ADDR" assemblyFormat="OPR MODE ADDR" instructionColors="#8880e4 #a782f6 #89e094" assemblyColors="#8880e4 #a782f6 #89e094" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7b9c9b" />
		<Microinstruction microRef="model.microinstruction.Arithmetic43d0f5" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="4" instructionFormat="OPR MODE ADDR" assemblyFormat="OPR MODE ADDR" instructionColors="#eaae9c #868ca3 #c683bc" assemblyColors="#eaae9c #868ca3 #c683bc" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7b9c9b" />
		<Microinstruction microRef="model.microinstruction.Logical287e9b" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="3" instructionFormat="OPR MODE ADDR" assemblyFormat="OPR MODE ADDR" instructionColors="#f3dac5 #faa1b6 #dab097" assemblyColors="#f3dac5 #faa1b6 #dab097" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess7b9c9b" />
		<Microinstruction microRef="model.microinstruction.TransferRtoR129c654" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="2" instructionFormat="OPR MODE ADDR" assemblyFormat="OPR MODE ADDR" instructionColors="#95d299 #97dfac #dfaee1" assemblyColors="#95d299 #97dfac #dfaee1" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess729196" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="1" instructionFormat="OPR MODE ADDR" assemblyFormat="OPR MODE ADDR" instructionColors="#e98aec #f1e3ef #c3d0f4" assemblyColors="#e98aec #f1e3ef #c3d0f4" >
		<Microinstruction microRef="model.microinstruction.TransferRtoRe66a1c" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<MachineInstruction name="BSA" opcode="0" instructionFormat="OPR MODE ADDR" assemblyFormat="OPR MODE ADDR" instructionColors="#aeefdd #a4b5d3 #b997a8" assemblyColors="#aeefdd #a4b5d3 #b997a8" >
		<Microinstruction microRef="model.microinstruction.MemoryAccess14dffe" />
		<Microinstruction microRef="model.microinstruction.Increment4eaaf" />
		<Microinstruction microRef="model.microinstruction.TransferRtoRe66a1c" />
		<Microinstruction microRef="model.microinstruction.End765716" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="model.module.RAM14df536" startingAddress="0" />

	<!--............. indexing info ............-->
	<IndexingInfo indexFromRight="true" />

	<!--............. program counter info ..................-->

</Machine>
